
#include <stdio.h>
#include <winsock2.h>

#pragma comment(lib, "ws2_32")
#pragma warning(disable:4996)

typedef struct
{
	SOCKET client;
	char* id;
} CLIENT_INFO;

// Luu thong tin client dang nhap thanh cong
CLIENT_INFO clients[64];
int numClients = 0;

CRITICAL_SECTION cs;

DWORD WINAPI ClientThread(LPVOID);
void RemoveClient(SOCKET);
BOOL ProcessConnect(SOCKET, char*, char*);
void ProcessSend(SOCKET, char*, char*);
void ProcessList(SOCKET, char*);
BOOL ProcessDisconnect(SOCKET, char*, char*);
void SendNotification(SOCKET, char*, int);

int main()
{
	//khai báo server đơn giản
	WSADATA wsa;
	WSAStartup(MAKEWORD(2, 2), &wsa);

	// cờ cs bọc toàn bộ server
	InitializeCriticalSection(&cs);

	SOCKADDR_IN addr;
	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = htonl(INADDR_ANY);
	addr.sin_port = 80;

	SOCKET listener = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	bind(listener, (SOCKADDR*)&addr, sizeof(addr));
	listen(listener, 5);

	// vòng lặp while để server liên tục accecpt các client connect tới
	// connect xong cái nào, ném luôn vào thread mới chạy hàm ClientThread và tham số là client
	while (1)
	{
		printf("Dang cho cac ket noi...\n");
		SOCKET client = accept(listener, NULL, NULL);
		printf("Ket noi moi: %d", client);

		CreateThread(0, 0, ClientThread, &client, 0, 0);
	}

	DeleteCriticalSection(&cs);
}

// Một thằng client đc accept sẽ ngay lập tức đc check đăng nhập luôn 
// 1. gửi tin báo client đăng nhập theo cú pháp
// 2. chạy vòng while nhận tin gửi về server, kiểm tra nếu là ngắt kết nối thì close socket, nếu đã đăng kí thì thêm xóa khỏi đăng kí và thông báo tới thành viên khác
//    Nếu không thì nhận và in ra màn hình server, lưu từ đầu của tin gửi vào cmd (xem command là gì)
// 3. Chưa check cmd vội, check đăng nhập chưa đã, nếu mà chưa đăng nhập, thì check cmd cú pháp Connect

DWORD WINAPI ClientThread(LPVOID lpParam)
{
	SOCKET client = *(SOCKET*)lpParam;

	int ret;
	char buf[256];
	char cmd[16], id[256];
	// khởi tạo check đăng nhập bằng False ngay từ đầu
	BOOL isRegistered = FALSE;


	const char* helloMsg = "Dang nhap theo cu phap \"CONNECT [your_id]\".\n";
	send(client, helloMsg, strlen(helloMsg), 0);

	// vòng while to nhất chạy lại sau mỗi 1 tin gửi từ client 
	while (1)
	{
		// Nhan du lieu từ client gửi sang
		ret = recv(client, buf, sizeof(buf), 0);
		// nếu là ngắt kết nối, mà đang đặng nhập thì thêm xóa khỏi clients rồi mới close socket
		if (ret <= 0)
		{
			if (isRegistered)
			{
				SendNotification(client, id, 2);
				RemoveClient(client);
			}

			closesocket(client);
			return 0;
		}

		buf[ret] = 0;
		printf("Received: %s\n", buf);

		// reset biến cmd về tất cả kí tự là 0: memset(con trỏ cần chèn, kí tự chèn vào, số kí tự chèn)
		memset(cmd, 0, sizeof(cmd));
		// phân tách xâu có dấu cách vào các biến con nhỏ hơn ==> destructure
		sscanf(buf, "%s", cmd);

	// check đăng nhập phải là to nhất, mỗi vòng while lặp lại đều phải check, nếu chưa thì xử lú đăng nhập, nếu rồi thì mới cho SEND, LIST và DISCONNECT
		if (!isRegistered) // Chua dang nhap
		{
			// Kiem tra cu phap
			if (strcmp(cmd, "CONNECT") == 0)
				isRegistered = ProcessConnect(client, buf, id);  // isRegister sẽ nhận kết quả sau khi xử lý hàm process này
			else
			{
				const char* errorMsg = "ERROR Lenh khong hop le.\n";
				send(client, errorMsg, strlen(errorMsg), 0);
			}
		}
		else // Da dang nhap
		{
			if (strcmp(cmd, "SEND") == 0)
				ProcessSend(client, id, buf);
			else if (strcmp(cmd, "LIST") == 0)
				ProcessList(client, buf);
			else if (strcmp(cmd, "DISCONNECT") == 0)
				isRegistered = !ProcessDisconnect(client, id, buf); // tức nếu disconnect fail thì vẫn là đăng nhập, còn nếu dis thành công thì register về false luôn
			else
			{
				const char* errorMsg = "ERROR Lenh khong hop le.\n";
				send(client, errorMsg, strlen(errorMsg), 0);
			}
		}
	}
}


// INPUT là client
// 1. tìm tới index của client đó trong mảng struct clients
// 2. hoán đổi thằng ở cuối mảng và thằng ở index đấy rồi cắt giảm numClient đi 1

void RemoveClient(SOCKET client)
{
	int i = 0;
	for (; i < numClients; i++)
		if (clients[i].client == client)
			break;
	if (i < numClients)
	{
		EnterCriticalSection(&cs);
		if (i < numClients - 1)
			clients[i] = clients[numClients - 1];
		numClients--;
		LeaveCriticalSection(&cs);
	}
}

// 1. CHECK ID Đăng kí có bị trùng không, nếu bị trùng trả FALSE
// 2. Nếu không trùng, check id có giống ALL không, nếu có cũng trả FALSE
// 3. Nếu không trùng, đúng cú pháp, gửi client CONNECT OK, thêm thông tin vào mằng struct clients: id và client, tăng numclient, return true;
// 4. Trước khi return true thì SendNotification
BOOL ProcessConnect(SOCKET client, char* buf, char* id)
{
	char tmp[32];
	int ret = sscanf(buf + strlen("CONNECT"), "%s %s", id, tmp);  // sscanf trả về số biến đc fill, vd return 1 thì tức id đc filled từ buf
	if (ret == 1)
	{	
		// check id đc phân tách ra xem đã có người dùng chưa
		int i;
		for (i = 0; i < numClients; i++)
			if (strcmp(id, clients[i].id) == 0)
				break;
		// nếu có rồi thì gửi lỗi cho client và kết thúc hàm process
		if (i < numClients)
		{
			const char* errorMsg = "CONNECT ERROR ID da duoc su dung. Hay chon ID khac.\n";
			send(client, errorMsg, strlen(errorMsg), 0);
			return FALSE;
		}
		else if (strcmp(id, "ALL") == 0)
		{
			const char* errorMsg = "CONNECT ERROR ID khong hop le. Hay chon ID khac.\n";
			send(client, errorMsg, strlen(errorMsg), 0);
			return FALSE;
		}
		else
		{
			const char* okMsg = "CONNECT OK\n";
			send(client, okMsg, strlen(okMsg), 0);

			EnterCriticalSection(&cs);
			clients[numClients].id = id;
			clients[numClients].client = client;
			numClients++;
			LeaveCriticalSection(&cs);

			SendNotification(client, id, 1);

			return TRUE;
		}
	}
	else
	{
		const char* errorMsg = "CONNECT ERROR Sai cu phap lenh CONNECT\n";
		send(client, errorMsg, strlen(errorMsg), 0);
		return FALSE;
	}
}

void ProcessSend(SOCKET client, char* id, char* buf)
{
	char sendBuf[256];
	char target[32]; // xem là gửi cho ai ALL hoặc ID
	int ret = sscanf(buf + strlen("SEND"), "%s", target);

	if (ret == -1)
	{
		const char* errorMsg = "SEND ERROR Sai cu phap lenh SEND.\n";
		send(client, errorMsg, strlen(errorMsg), 0);
	}
	else
	{	//cắt lấy đoạn msg bằng cách dịch con trỏ
		char* msgPointer = buf + strlen("SEND") + strlen(target) + 2; // cộng hai cái dấu cách nữa
		if (strcmp(target, "ALL") == 0)
		{
			// gán với MESSAGE_ALL gửi cho tất cả trừ thằng client, và gửi client SEND OK
			sprintf(sendBuf, "MESSAGE_ALL %s %s", id, msgPointer);
			for (int i = 0; i < numClients; i++)
				if (clients[i].client != client)
					send(clients[i].client, sendBuf, strlen(sendBuf), 0);

			const char* okMsg = "SEND OK\n";
			send(client, okMsg, strlen(okMsg), 0);
		}
		else
		{	
			// nạp từ phải qua trái, nạp hai thằng id và msgPointer vào cú pháp ... và nạp và sendBuf
			sprintf(sendBuf, "MESSAGE %s %s", id, msgPointer);
			// tìm index của thằng có id giống target, gửi cho thằng đó MESSAGE..., gửi cho chính client đó SEND OK;
			// nếu không tìm đc, báo lỗi
			int i;
			for (i = 0; i < numClients; i++)
				if (strcmp(clients[i].id, target) == 0) break;
			if (i < numClients)
			{
				send(clients[i].client, sendBuf, strlen(sendBuf), 0);
				const char* okMsg = "SEND OK\n";
				send(client, okMsg, strlen(okMsg), 0);
			}
			else
			{
				const char* errorMsg = "SEND ERROR Khong tim thay user nhan tin nhan.\n";
				send(client, errorMsg, strlen(errorMsg), 0);
			}
		}
	}
}

void ProcessList(SOCKET client, char* buf)
{
	char tmp[32];
	int ret = sscanf(buf + strlen("LIST"), "%s", tmp);
	if (ret != -1)
	{
		const char* errorMsg = "LIST ERROR Sai cu phap lenh LIST.\n";
		send(client, errorMsg, strlen(errorMsg), 0);
	}
	else
	{
		char sendBuf[256] = "LIST OK ";
		for (int i = 0; i < numClients; i++)
		{
			strcat(sendBuf, clients[i].id);
			strcat(sendBuf, ",");
		}

		// Xoa dau phay cuoi cung
		int len = strlen(sendBuf);
		sendBuf[len - 1] = '\n';

		send(client, sendBuf, strlen(sendBuf), 0);
	}
}

BOOL ProcessDisconnect(SOCKET client, char* id, char* buf)
{
	char tmp[32];
	int ret = sscanf(buf + strlen("DISCONNECT"), "%s", tmp);  // + length của DISCONNECT để dịch con trỏ lên bỏ qua cmd ở đầu buffer
	if (ret != -1)
	{
		const char* errorMsg = "DISCONNECT ERROR Sai cu phap lenh DISCONNECT.\n";
		send(client, errorMsg, strlen(errorMsg), 0);
		return FALSE;
	}
	else
	{
		SendNotification(client, id, 2);
		const char* okMsg = "DISCONNECT OK\n";
		send(client, okMsg, strlen(okMsg), 0);
		RemoveClient(client);
		return TRUE;
	}
}

// nhận client, id và mã để gửi thông báo loại gì
// 1. type = 1 thì send USER_CONNECT id tới toàn bộ client khác trong mảng clients khác client truyền vào
// 2. type = 2 thì send USER_DISCONNECT id tới toàn bộ ...
// 3. hàm ko return ra gì

void SendNotification(SOCKET client, char* id, int type)
{
	char sendBuf[32];
	if (type == 1)
	{
		sprintf(sendBuf, "USER_CONNECT %s\n", id);
		for (int i = 0; i < numClients; i++)
			if (clients[i].client != client)
				send(clients[i].client, sendBuf, strlen(sendBuf), 0);
	}
	else if (type == 2)
	{
		sprintf(sendBuf, "USER_DISCONNECT %s\n", id);
		for (int i = 0; i < numClients; i++)
			if (clients[i].client != client)
				send(clients[i].client, sendBuf, strlen(sendBuf), 0);
	}
}
